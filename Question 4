#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_NODES 2001

typedef struct {
    int dest;
    int weight;
} Edge;

typedef struct {
    Edge edges[MAX_NODES];
    int edgeCount;
} Node;

Node graph[MAX_NODES];
int dist[MAX_NODES];
int visited[MAX_NODES];

void dijkstra(int start) {
    for (int i = 0; i < MAX_NODES; i++) {
        dist[i] = INT_MAX;
        visited[i] = 0;
    }
    dist[start] = 0;

    for (int i = 0; i < MAX_NODES; i++) {
        int u = -1;
        for (int j = 0; j < MAX_NODES; j++) {
            if (!visited[j] && (u == -1 || dist[j] < dist[u])) {
                u = j;
            }
        }
        if (dist[u] == INT_MAX) break;
        visited[u] = 1;

        for (int j = 0; j < graph[u].edgeCount; j++) {
            Edge edge = graph[u].edges[j];
            int v = edge.dest;
            int weight = edge.weight;
            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
            }
        }
    }
}

int main() {
    int M, A, B;
    scanf("%d %d %d", &M, &A, &B);

    for (int i = 0; i < M; i++) {
        int X, Y, Z;
        scanf("%d %d %d", &X, &Y, &Z);
        graph[X].edges[graph[X].edgeCount++] = (Edge){Y, Z};
        graph[Y].edges[graph[Y].edgeCount++] = (Edge){X, Z};
    }

    dijkstra(A);

    if (dist[B] == INT_MAX) {
        printf("NO\n");
    } else {
        printf("YES\n%d\n", dist[B]);
    }

    return 0;
}
